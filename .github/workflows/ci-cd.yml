name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual trigger

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  POSTGRES_DB: task_management
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black
        npm ci

    - name: Check Python formatting
      run: |
        black . --check
        flake8 .

    - name: Check JavaScript formatting
      run: |
        npm run lint
        npm run format:check

  test-backend:
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black==25.1.0 flake8
    
    - name: Check code formatting with Black
      run: |
        black . --check --config pyproject.toml
    
    - name: Lint with Flake8
      run: |
        flake8 . --config=.flake8
    
    - name: Run tests with coverage
      env:
        DB_HOST: localhost
        DB_NAME: task_management
        DB_USER: postgres
        DB_PASSWORD: postgres
      run: |
        pytest tests/ --cov=. --cov-report=xml
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  test-frontend:
    runs-on: ubuntu-latest
    needs: lint

    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests with coverage
      run: npm test -- --coverage
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/coverage-final.json

  security:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    steps:
    - uses: actions/checkout@v3

    - name: Run security scan
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        command: monitor

    - name: Check for vulnerable dependencies
      run: |
        pip install safety
        safety check

  deploy:
    needs: [test-backend, test-frontend, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        npm ci

    - name: Build frontend
      run: npm run build
      env:
        CI: true
        REACT_APP_API_URL: ${{ secrets.API_URL }}

    - name: Deploy to production
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      run: |
        curl https://cli-assets.heroku.com/install.sh | sh
        heroku container:login
        heroku container:push web -a ${{ secrets.HEROKU_APP_NAME }}
        heroku container:release web -a ${{ secrets.HEROKU_APP_NAME }} 