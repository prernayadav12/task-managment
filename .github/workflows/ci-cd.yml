name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual trigger

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  POSTGRES_DB: task_management
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install black==25.1.0 flake8

    - name: Install Node.js dependencies
      working-directory: ./task-management-frontend
      run: npm ci

    - name: Check Python formatting with Black
      run: |
        echo "Black version:"
        python -m black --version
        echo "\nChecking formatting:"
        python -m black . --check --config pyproject.toml

    - name: Check Python style with Flake8
      run: |
        echo "Flake8 version:"
        python -m flake8 --version
        echo "\nChecking style:"
        python -m flake8 . --config=.flake8

    - name: Check JavaScript formatting
      working-directory: ./task-management-frontend
      run: |
        npm run lint
        npm run format:check

  test-backend:
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist
    
    - name: Run tests with coverage
      env:
        DB_HOST: localhost
        DB_NAME: ${{ env.POSTGRES_DB }}
        DB_USER: ${{ env.POSTGRES_USER }}
        DB_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
      run: |
        pytest tests/ -n auto --cov=. --cov-report=xml --cov-report=term
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        fail_ci_if_error: true

  test-frontend:
    runs-on: ubuntu-latest
    needs: lint

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run React tests with coverage
      run: npm test -- --coverage --watchAll=false --ci
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/coverage-final.json
        flags: frontend
        fail_ci_if_error: true

  security:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    steps:
    - uses: actions/checkout@v3

    - name: Run security scan
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        command: monitor

    - name: Check for vulnerable dependencies
      run: |
        pip install safety
        safety check

  # Deployment job is commented out until deployment platform is chosen
  # deploy:
  #   needs: [test-backend, test-frontend, security]
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   environment: production
  #
  #   steps:
  #   - uses: actions/checkout@v3
  #
  #   - name: Set up Python
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: ${{ env.PYTHON_VERSION }}
  #       cache: 'pip'
  #
  #   - name: Set up Node.js
  #     uses: actions/setup-node@v3
  #     with:
  #       node-version: ${{ env.NODE_VERSION }}
  #       cache: 'npm'
  #
  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install -r requirements.txt
  #       npm ci
  #
  #   - name: Build frontend
  #     run: npm run build
  #     env:
  #       CI: true
  #       REACT_APP_API_URL: ${{ secrets.API_URL }}
  #
  #   # Add deployment steps here once deployment platform is chosen 